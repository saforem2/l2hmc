# arguments passed to `gauge_model.py` module
# to run as script: `python3 gauge_model.py @gauge_model_args.txt`

--time_size 8                  # temporal extent of lattice
--space_size 8                 # spatial extent of lattice
--link_type 'U1'               # gauge group, one of 'SU2', 'SU3', 'U1'
--dim 2                        # dimensionality of lattice
--num_samples 64               # number of samples per batch
--num_steps 5                  # number of leapfrog steps in MD update
--eps 0.4                      # step size in leapfrog integrator
--lr_init 0.001                # initial value of learning rate
--lr_decay_steps 1000          # steps after which lr is decayed by lr_decay_rate
--lr_decay_rate 0.98           # factor by which lr is decayed by after lr_decay_steps
--annealing                    # when passed, will anneal beta during training
--beta_init 2.                 # initial value of beta used in annealing schedule
--beta_final 4.                # final value of beta used in annealing schedule
--train_steps 5000             # number of training steps
--save_steps 1000              # "number of steps after which" to save model checkpoint
--print_steps 1                # "" to display information during training
--training_samples_steps 1000  # "" the sampler is evaluated at beta_final 
--training_samples_length 500  # "" the sampler is evaluated for when run during training
--network_arch 'conv3D'        # network architecture to use, one of 'conv3D', 'conv2D', 'generic'
--metric 'cos_diff'            # metric for measuring diff. between samples, 
                               # must be one of: 'l1', 'l2', 'cos2', 'cos', 'cos_diff'
--aux                          # "whether or not to" include auxiliary variable in loss function
--loss_scale 1.                # factor by which the loss is multiplied
--plaq_loss                    # "" use the plaquette difference term in the loss function
--summaries                    # "flag that when passed" will create summary objects viewable in tensorflow
--eps_trainable                # "" allows the step size `eps` to be a trainable parameter
